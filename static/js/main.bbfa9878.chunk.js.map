{"version":3,"sources":["store/comments/commentSlice.ts","components/NewCommentForm.tsx","assets/heart-regular.svg","assets/heart-solid.svg","components/Comment.tsx","components/CommentsList.tsx","App.tsx","store/reducer.ts","store/store.ts","index.tsx"],"names":["initialState","items","selectComments","state","comments","NewCommentForm","useState","title","setTitle","text","setText","dispatch","useDispatch","className","type","placeholder","value","onChange","event","target","onClick","preventDefault","payload","Comment","comment","liked","setLiked","console","log","src","heartSolid","alt","heart","CommentsList","useSelector","map","App","rootReducer","combineReducers","action","lastCommentAdded","Date","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAQMA,EAA8B,CAAEC,MAAO,IAwBtC,IAAMC,EAAiB,SAACC,GAAD,OAAsBA,EAAMC,SAASH,O,OC1BtDI,EAA2B,WACpC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAkBjB,OACI,sBAAKC,UAAU,aAAf,UACI,uBACIC,KAAK,OACLC,YAAY,aACZF,UAAU,kBACVG,MAAOT,EACPU,SAnBmB,SAACC,GAC5BV,EAASU,EAAMC,OAAOH,UAoBlB,uBACID,YAAY,aACZF,UAAU,oBACVC,KAAK,OACLE,MAAOP,EACPQ,SA9BqB,SAACC,GAC9BR,EAAQQ,EAAMC,OAAOH,UA+BjB,8BACI,wBAAQH,UAAU,qBAAqBC,KAAK,SAASM,QAzB3C,SAACF,GACnBA,EAAMG,iBACNV,EDN6C,CAAEG,KAAM,cAAeQ,QCMhD,CAAEf,QAAOE,UAC7BD,EAAS,IACTE,EAAQ,KAqBA,wBC5CD,MAA0B,0CCA1B,MAA0B,wCCS5Ba,EAA2B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvC,EAA0BlB,oBAAS,GAAnC,mBAAOmB,EAAP,KAAcC,EAAd,KACAC,QAAQC,IAAIJ,GAMZ,OACI,sBAAKX,UAAU,UAAf,UACI,qBAAKA,UAAU,iBAAf,SAAiCW,EAAQjB,QACzC,qBAAKM,UAAU,gBAAf,SAAgCW,EAAQf,OACxC,qBAAKI,UAAU,+BAA+BO,QARnC,WACfM,GAAUD,IAON,SAEQA,EACI,qBAAKZ,UAAU,uBAAuBgB,IAAKC,EAAYC,IAAI,gBAE3D,qBAAKlB,UAAU,uBAAuBgB,IAAKG,EAAOD,IAAI,sBCnBjEE,EAAyB,WACpC,IAAM7B,EAAW8B,YAAYhC,GAC7B,OACE,8BAEIE,EAAS+B,KAAI,SAAAX,GAAO,OAAI,cAAC,EAAD,CAA6BA,QAASA,GAAxBA,EAAQjB,aCSvC6B,MAbf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,U,OCTFwB,EAAcC,YAAgB,CAChClC,SPYW,WAAoE,IAA3CD,EAA0C,uDAAlCH,EAAcuC,EAAoB,uCAC9E,MACS,gBADDA,EAAOzB,KAGA,2BACAX,GADP,IAEIF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBsC,EAAOjB,UAC/BkB,iBAAkB,IAAIC,OAInBtC,KOpBJkC,ICAAK,EALDC,YAAYN,GCG1BO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.bbfa9878.chunk.js","sourcesContent":["import { CommentType } from \"../../types/CommentType\";\nimport { RootState } from \"../store\";\n\ntype CommentsState = {\n    items: CommentType[];\n    lastCommentAdded?: Date\n}\n\nconst initialState: CommentsState = { items: [] };\n\nexport interface ActionType {\n    type: string,\n    payload: CommentType\n}\n\nexport const addComment = (payload: CommentType) => ({ type: 'NEW_COMMENT', payload })\n\nexport default function commentsReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case 'NEW_COMMENT': {\n            // Can return just the new todos array - no extra object around it\n            return {\n                ...state,\n                items: [...state.items, action.payload],\n                lastCommentAdded: new Date()\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const selectComments = (state: RootState) => state.comments.items;","import React, { useState, useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { ActionType, addComment } from '../store/comments/commentSlice';\nimport { AppDispatch } from '../store/store';\nimport { CommentType } from '../types/CommentType';\n\nexport const NewCommentForm: React.FC = () => {\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('');\n    const dispatch = useDispatch();\n\n    const handleCommentInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setText(event.target.value);\n    }\n\n    const handleTitleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.target.value);\n    }\n\n    const handleSending = (event: React.FormEvent<EventTarget>) => {\n        event.preventDefault();\n        dispatch(addComment({ title, text }));\n        setTitle('');\n        setText('');\n    }\n\n\n    return (\n        <div className=\"newComment\">\n            <input\n                type=\"text\"\n                placeholder=\"title here\"\n                className=\"newTitle__input\"\n                value={title}\n                onChange={handleTitleInputChange}\n            />\n            <input\n                placeholder=\"What's up?\"\n                className=\"newComment__input\"\n                type=\"text\"\n                value={text}\n                onChange={handleCommentInputChange}\n            />\n            <div>\n                <button className=\"newComment__button\" type=\"submit\" onClick={handleSending}>send</button>\n            </div>\n        </div>\n    )\n\n}\n\n// interface NewCommentFormProps {\n//     addComment: (commentData: CommentType) => void;\n// }\n\n// const CommentsListExpectsData: React.FC<NewCommentFormProps> = ({ addComment }) => {\n//     addComment({ title: 'title', text: 'text' });\n//     return (\n//         <div></div>\n//     )\n// }\n// const mapDispatchToProps = (dispatch: AppDispatch) => {\n//     return {\n//         addComment: ({ title, text }: CommentType) => dispatch({ type: 'ADD_COMMENT', title, text })\n//     }\n// }\n\n// export const CommentsListWithData = connect(null, mapDispatchToProps)(CommentsListExpectsData);","export default __webpack_public_path__ + \"static/media/heart-regular.f358882f.svg\";","export default __webpack_public_path__ + \"static/media/heart-solid.70b72c45.svg\";","import React, { DOMAttributes, MouseEventHandler, useState } from 'react';\nimport heart from '../assets/heart-regular.svg';\nimport heartSolid from '../assets/heart-solid.svg';\nimport { CommentType } from '../types/CommentType';\n\ninterface Props {\n    comment: CommentType;\n}\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n    const [liked, setLiked] = useState(false);\n    console.log(comment)\n\n    const handleLike = () => {\n        setLiked(!liked);\n    }\n\n    return (\n        <div className=\"Comment\">\n            <div className=\"Comment__title\">{comment.title}</div>\n            <div className=\"Comment__body\">{comment.text}</div>\n            <div className=\"Comment__like-button-wrapper\" onClick={handleLike}>\n                {\n                    liked ?\n                        <img className=\"Comment__like-button\" src={heartSolid} alt=\"like button\" />\n                        :\n                        <img className=\"Comment__like-button\" src={heart} alt=\"like button\" />\n                }\n            </div>\n\n        </div>\n\n    )\n}","import React, { useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport { selectComments } from '../store/comments/commentSlice';\nimport { RootState } from '../store/store';\nimport { CommentType } from '../types/CommentType';\nimport { Comment } from './Comment';\n\nexport const CommentsList: React.FC = () => {\n  const comments = useSelector(selectComments);\n  return (\n    <div>\n      {\n        comments.map(comment => <Comment key={comment.title} comment={comment} />)\n      }\n    </div>\n  )\n}\n\n// interface CommentsListProps {\n//   comments: CommentType[];\n// }\n// const CommentsListExpectsData: React.FC<CommentsListProps> = ({ comments }) => {\n//   return (\n//     <div>\n//       {\n//         comments.map(comment => <Comment key={comment.title} comment={comment} />)\n//       }\n//     </div>\n//   )\n// }\n// const mapStateToProps = (state: RootState) => ({\n//   comments: selectComments(state)\n// });\n\n// export const CommentsListWithData = connect(mapStateToProps)(CommentsListExpectsData);","import './App.scss';\nimport React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from './components/NewCommentForm';\nimport { CommentsList } from './components/CommentsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport store, { RootState } from './store/store';\nimport { CommentType } from './types/CommentType';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-wrapper\">\n        <NewCommentForm />\n        <CommentsList />\n        {/* <CommentsListWithData /> */}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n\n","import { combineReducers } from 'redux'\n\nimport commentsReducer from './comments/commentSlice'\n\nconst rootReducer = combineReducers({\n    comments: commentsReducer,\n})\n\nexport default rootReducer","import { createStore } from 'redux'\nimport rootReducer from './reducer'\n\nconst store = createStore(rootReducer)\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}